package controllers

import (
	"fmt"
	"log/slog"
	"net/http"
	"strconv"
{{- range .Fields}}
{{- if and (not .IsSystemField) (eq .GoFormType "time.Time")}}
	"time"
{{- break}}
{{- end}}
{{- end}}

	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"{{.ModulePath}}/models"
	"{{.ModulePath}}/database"
	"{{.ModulePath}}/router/cookies"
	"{{.ModulePath}}/router/routes"
	"{{.ModulePath}}/views"
)

type {{.ResourceName}}s struct {
{{- if eq (DatabaseType) "sqlite"}}
	db database.SQLite
{{- else}}
	db database.Postgres
{{- end}}
}

func new{{.ResourceName}}s({{- if eq (DatabaseType) "sqlite"}}db database.SQLite{{- else}}db database.Postgres{{- end}}) {{.ResourceName}}s {
	return {{.ResourceName}}s{db}
}

func (r {{.ResourceName}}s) Index(c echo.Context) error {
	page := int64(1)
	if p := c.QueryParam("page"); p != "" {
		if parsed, err := strconv.Atoi(p); err == nil && parsed > 0 {
			page = int64(parsed)
		}
	}

	perPage := int64(25)
	if pp := c.QueryParam("per_page"); pp != "" {
		if parsed, err := strconv.Atoi(pp); err == nil && parsed > 0 &&
			parsed <= 100 {
			perPage = int64(parsed)
		}
	}

	{{.PluralName}}List, err := models.Paginate{{.ResourceName}}s(
		c.Request().Context(),
		r.db.{{DatabaseMethod}}(),
		page,
		perPage,
	)
	if err != nil {
		return render(c, views.InternalError())
	}

	return render(c, views.{{.ResourceName}}Index({{.PluralName}}List.{{.ResourceName}}s))
}

func (r {{.ResourceName}}s) Show(c echo.Context) error {
	{{.ResourceName | ToLower}}ID, err := uuid.Parse(c.Param("id"))
	if err != nil {
		return render(c, views.BadRequest())
	}

	{{.ResourceName | ToLower}}, err := models.Find{{.ResourceName}}(c.Request().Context(), r.db.{{DatabaseMethod}}(), {{.ResourceName | ToLower}}ID)
	if err != nil {
		return render(c, views.NotFound())
	}

	return render(c, views.{{.ResourceName}}Show({{.ResourceName | ToLower}}))
}

func (r {{.ResourceName}}s) New(c echo.Context) error {
	return render(c, views.{{.ResourceName}}New())
}

type Create{{.ResourceName}}FormPayload struct {
{{- range .Fields}}
{{- if not .IsSystemField}}
	{{- if eq .GoFormType "time.Time"}}
	{{.Name}}    string `form:"{{.DBName}}"`
	{{- else}}
	{{.Name}}    {{.GoFormType}} `form:"{{.DBName}}"`
	{{- end}}
{{- end}}
{{- end}}
}

func (r {{.ResourceName}}s) Create(c echo.Context) error {
	var payload Create{{.ResourceName}}FormPayload
	if err := c.Bind(&payload); err != nil {
		slog.ErrorContext(
			c.Request().Context(),
			"could not parse Create{{.ResourceName}}FormPayload",
			"error",
			err,
		)

		return render(c, views.NotFound())
	}

	data := models.Create{{.ResourceName}}Data{
{{- range .Fields}}
{{- if not .IsSystemField}}
		{{- if eq .GoFormType "time.Time"}}
		{{.Name}}:    func() time.Time {
			if payload.{{.Name}} == "" {
				return time.Time{}
			}
			if t, err := time.Parse("2006-01-02", payload.{{.Name}}); err == nil {
				return t
			}
			return time.Time{}
		}(),
		{{- else}}
		{{.Name}}:    payload.{{.Name}},
		{{- end}}
{{- end}}
{{- end}}
	}

	{{.ResourceName | ToLower}}, err := models.Create{{.ResourceName}}(
		c.Request().Context(),
		r.db.{{DatabaseMethod}}(),
		data,
	)
	if err != nil {
		if flashErr := cookies.AddFlash(c, cookies.FlashError, fmt.Sprintf("Failed to create {{.ResourceName | ToLower}}: %v", err)); flashErr != nil {
			return flashErr
		}
		return c.Redirect(http.StatusSeeOther, routes.{{.ResourceName}}New.Path)
	}

	if flashErr := cookies.AddFlash(c, cookies.FlashSuccess, "{{.ResourceName}} created successfully"); flashErr != nil {
		return render(c, views.InternalError())
	}

	return c.Redirect(http.StatusSeeOther, routes.{{.ResourceName}}Show.GetPath({{.ResourceName | ToLower}}.ID))
}

func (r {{.ResourceName}}s) Edit(c echo.Context) error {
	{{.ResourceName | ToLower}}ID, err := uuid.Parse(c.Param("id"))
	if err != nil {
		return render(c, views.BadRequest())
	}

	{{.ResourceName | ToLower}}, err := models.Find{{.ResourceName}}(c.Request().Context(), r.db.{{DatabaseMethod}}(), {{.ResourceName | ToLower}}ID)
	if err != nil {
		return render(c, views.NotFound())
	}

	return render(c, views.{{.ResourceName}}Edit({{.ResourceName | ToLower}}))
}

type Update{{.ResourceName}}FormPayload struct {
{{- range .Fields}}
{{- if not .IsSystemField}}
	{{- if eq .GoFormType "time.Time"}}
	{{.Name}}    string `form:"{{.DBName}}"`
	{{- else}}
	{{.Name}}    {{.GoFormType}} `form:"{{.DBName}}"`
	{{- end}}
{{- end}}
{{- end}}
}

func (r {{.ResourceName}}s) Update(c echo.Context) error {
	{{.ResourceName | ToLower}}ID, err := uuid.Parse(c.Param("id"))
	if err != nil {
		return render(c, views.BadRequest())
	}

	var payload Update{{.ResourceName}}FormPayload
	if err := c.Bind(&payload ); err != nil {
		slog.ErrorContext(
			c.Request().Context(),
			"could not parse Update{{.ResourceName}}FormPayload",
			"error",
			err,
		)

		return render(c, views.NotFound())
	}

	data := models.Update{{.ResourceName}}Data{
		ID:      {{.ResourceName | ToLower}}ID,
{{- range .Fields}}
{{- if not .IsSystemField}}
		{{- if eq .GoFormType "time.Time"}}
		{{.Name}}:    func() time.Time {
			if payload.{{.Name}} == "" {
				return time.Time{}
			}
			if t, err := time.Parse("2006-01-02", payload.{{.Name}}); err == nil {
				return t
			}
			return time.Time{}
		}(),
		{{- else}}
		{{.Name}}:    payload.{{.Name}},
		{{- end}}
{{- end}}
{{- end}}
	}

	{{.ResourceName | ToLower}}, err := models.Update{{.ResourceName}}(
		c.Request().Context(),
		r.db.{{DatabaseMethod}}(),
		data,
	)
	if err != nil {
		if flashErr := cookies.AddFlash(c, cookies.FlashError, fmt.Sprintf("Failed to update {{.ResourceName | ToLower}}: %v", err)); flashErr != nil {
			return render(c, views.InternalError())
		}
		return c.Redirect(
			http.StatusSeeOther,
			routes.{{.ResourceName}}Edit.GetPath({{.ResourceName | ToLower}}ID),
		)
	}

	if flashErr := cookies.AddFlash(c, cookies.FlashSuccess, "{{.ResourceName}} updated successfully"); flashErr != nil {
		return render(c, views.InternalError())
	}

	return c.Redirect(http.StatusSeeOther, routes.{{.ResourceName}}Show.GetPath({{.ResourceName | ToLower}}.ID))
}

func (r {{.ResourceName}}s) Destroy(c echo.Context) error {
	{{.ResourceName | ToLower}}ID, err := uuid.Parse(c.Param("id"))
	if err != nil {
		return render(c, views.BadRequest())
	}

	err = models.Destroy{{.ResourceName}}(c.Request().Context(), r.db.{{DatabaseMethod}}(), {{.ResourceName | ToLower}}ID)
	if err != nil {
		if flashErr := cookies.AddFlash(c, cookies.FlashError, fmt.Sprintf("Failed to delete {{.ResourceName | ToLower}}: %v", err)); flashErr != nil {
			return render(c, views.InternalError())
		}
		return c.Redirect(http.StatusSeeOther, routes.{{.ResourceName}}Index.Path)
	}

	if flashErr := cookies.AddFlash(c, cookies.FlashSuccess, "{{.ResourceName}} destroyed successfully"); flashErr != nil {
		return render(c, views.InternalError())
	}

	return c.Redirect(http.StatusSeeOther, routes.{{.ResourceName}}Index.Path)
}

