package models

import (
	"context"
	"errors"
{{- range .Imports}}
{{- if not (contains . ".")}}
	"{{.}}"
{{- end}}
{{- end}}

{{- range .Imports}}
{{- if contains . "."}}
	"{{.}}"
{{- end}}
{{- end}}

	"{{.ModulePath}}/models/internal/db"
)

type {{.Name}} struct {
{{- range .Fields}}
	{{.Name}} {{.Type}}
{{- end}}
}

func Find{{.Name}}(
	ctx context.Context,
	dbtx db.DBTX,
	id uuid.UUID,
) ({{.Name}}, error) {
	row, err := db.New().Query{{.Name}}ByID(ctx, dbtx, {{uuidParam "id"}})
	if err != nil {
		return {{.Name}}{}, err
	}

{{if hasErrorHandling}}	result, err := rowTo{{.Name}}(row)
	if err != nil {
		return {{.Name}}{}, err
	}
	return result, nil{{else}}	return rowTo{{.Name}}(row), nil{{end}}
}

type Create{{.Name}}Data struct {
{{- range .Fields}}
{{- if and (ne .Name "ID") (ne .Name "CreatedAt") (ne .Name "UpdatedAt")}}
	{{.Name}} {{.Type}}
{{- end}}
{{- end}}
}

func Create{{.Name}}(
	ctx context.Context,
	dbtx db.DBTX,
	data Create{{.Name}}Data,
) ({{.Name}}, error) {
	if err := validate.Struct(data); err != nil {
		return {{.Name}}{}, errors.Join(ErrDomainValidation, err)
	}

	params := db.NewInsert{{.Name}}Params()
	row, err := db.New().Insert{{.Name}}(ctx, dbtx, params)
	if err != nil {
		return {{.Name}}{}, err
	}

{{if hasErrorHandling}}	result, err := rowTo{{.Name}}(row)
	if err != nil {
		return {{.Name}}{}, err
	}
	return result, nil{{else}}	return rowTo{{.Name}}(row), nil{{end}}
}

type Update{{.Name}}Data struct {
	ID uuid.UUID
{{- range .Fields}}
{{- if and (ne .Name "ID") (ne .Name "CreatedAt")}}
	{{.Name}} {{.Type}}
{{- end}}
{{- end}}
}

func Update{{.Name}}(
	ctx context.Context,
	dbtx db.DBTX,
	data Update{{.Name}}Data,
) ({{.Name}}, error) {
	if err := validate.Struct(data); err != nil {
		return {{.Name}}{}, errors.Join(ErrDomainValidation, err)
	}

	currentRow, err := db.New().Query{{.Name}}ByID(ctx, dbtx, {{uuidParam "data.ID"}})
	if err != nil {
		return {{.Name}}{}, err
	}

	params := db.NewUpdate{{.Name}}Params()

	row, err := db.New().Update{{.Name}}(ctx, dbtx, params)
	if err != nil {
		return {{.Name}}{}, err
	}

{{if hasErrorHandling}}	result, err := rowTo{{.Name}}(row)
	if err != nil {
		return {{.Name}}{}, err
	}
	return result, nil{{else}}	return rowTo{{.Name}}(row), nil{{end}}
}

func Destroy{{.Name}}(
	ctx context.Context,
	dbtx db.DBTX,
	id uuid.UUID,
) error {
	return db.New().Delete{{.Name}}(ctx, dbtx, {{uuidParam "id"}})
}

func All{{.Name}}s(
	ctx context.Context,
	dbtx db.DBTX,
) ([]{{.Name}}, error) {
	rows, err := db.New().QueryAll{{.Name}}s(ctx, dbtx)
	if err != nil {
		return nil, err
	}

	{{lower .Name}}s := make([]{{.Name}}, len(rows))
	for i, row := range rows {
{{if hasErrorHandling}}		result, err := rowTo{{.Name}}(row)
		if err != nil {
			return nil, err
		}
		{{lower .Name}}s[i] = result{{else}}		{{lower .Name}}s[i] = rowTo{{.Name}}(row){{end}}
	}

	return {{lower .Name}}s, nil
}

type Paginated{{.Name}}s struct {
	{{.Name}}s []{{.Name}}
	TotalCount int64
	Page       int64
	PageSize   int64
	TotalPages int64
}

func Paginate{{.Name}}s(
	ctx context.Context,
	dbtx db.DBTX,
	page int64,
	pageSize int64,
) (Paginated{{.Name}}s, error) {
	if page < 1 {
		page = 1
	}
	if pageSize < 1 {
		pageSize = 10
	}
	if pageSize > 100 {
		pageSize = 100
	}

	offset := (page - 1) * pageSize

	totalCount, err := db.New().Count{{.Name}}s(ctx, dbtx)
	if err != nil {
		return Paginated{{.Name}}s{}, err
	}

	rows, err := db.New().QueryPaginated{{.Name}}s(
		ctx,
		dbtx,
		db.NewQueryPaginated{{.Name}}sParams(pageSize, offset),
	)
	if err != nil {
		return Paginated{{.Name}}s{}, err
	}

	{{lower .Name}}s := make([]{{.Name}}, len(rows))
	for i, row := range rows {
{{if hasErrorHandling}}		result, err := rowTo{{.Name}}(row)
		if err != nil {
			return Paginated{{.Name}}s{}, err
		}
		{{lower .Name}}s[i] = result{{else}}		{{lower .Name}}s[i] = rowTo{{.Name}}(row){{end}}
	}

	totalPages := (totalCount + int64(pageSize) - 1) / int64(pageSize)

	return Paginated{{.Name}}s{
		{{.Name}}s:    {{lower .Name}}s,
		TotalCount: totalCount,
		Page:       page,
		PageSize:   pageSize,
		TotalPages: totalPages,
	}, nil
}

{{if hasErrorHandling}}
func rowTo{{.Name}}(row db.{{SQLCTypeName .TableName}}) ({{.Name}}, error) {
{{- range .Fields}}
{{- if .RequiresErrorHandling}}
	{{lower .Name}}, err := {{.ConversionFromDB}}
	if err != nil {
		return {{$.Name}}{}, err
	}
{{- end}}
{{- end}}

	return {{.Name}}{
{{- range .Fields}}
{{- if .RequiresErrorHandling}}
		{{.Name}}: {{lower .Name}},
{{- else}}
		{{.Name}}: {{.ConversionFromDB}},
{{- end}}
{{- end}}
	}, nil
}
{{else}}
func rowTo{{.Name}}(row db.{{SQLCTypeName .TableName}}) {{.Name}} {
	return {{.Name}}{
{{- range .Fields}}
		{{.Name}}: {{.ConversionFromDB}},
{{- end}}
	}
}
{{end}}


