// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"context"
	"fmt"
	"io"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// Team is an object representing the database table.
type Team struct {
	ID          uuid.UUID        `db:"id,pk" db:"id"`
	Name        null.Val[string] `db:"name" db:"name"`
	MemberCount null.Val[int32]  `db:"member_count" db:"member_count"`
	UserID      uuid.UUID        `db:"user_id" db:"user_id"`

	R teamR `db:"-" db:"-"`
}

// TeamSlice is an alias for a slice of pointers to Team.
// This should almost always be used instead of []*Team.
type TeamSlice []*Team

// Teams contains methods to work with the teams table
var Teams = psql.NewTablex[*Team, TeamSlice, *TeamSetter]("", "teams", buildTeamColumns("teams"))

// TeamsQuery is a query on the teams table
type TeamsQuery = *psql.ViewQuery[*Team, TeamSlice]

// teamR is where relationships are stored.
type teamR struct {
	User *User `db:"User"` // teams.fk_customer
}

func buildTeamColumns(alias string) teamColumns {
	return teamColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"id", "name", "member_count", "user_id",
		).WithParent("teams"),
		tableAlias:  alias,
		ID:          psql.Quote(alias, "id"),
		Name:        psql.Quote(alias, "name"),
		MemberCount: psql.Quote(alias, "member_count"),
		UserID:      psql.Quote(alias, "user_id"),
	}
}

type teamColumns struct {
	expr.ColumnsExpr
	tableAlias  string
	ID          psql.Expression
	Name        psql.Expression
	MemberCount psql.Expression
	UserID      psql.Expression
}

func (c teamColumns) Alias() string {
	return c.tableAlias
}

func (teamColumns) AliasedAs(alias string) teamColumns {
	return buildTeamColumns(alias)
}

// TeamSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type TeamSetter struct {
	ID          omit.Val[uuid.UUID]  `db:"id,pk" db:"id"`
	Name        omitnull.Val[string] `db:"name" db:"name"`
	MemberCount omitnull.Val[int32]  `db:"member_count" db:"member_count"`
	UserID      omit.Val[uuid.UUID]  `db:"user_id" db:"user_id"`
}

func (s TeamSetter) SetColumns() []string {
	vals := make([]string, 0, 4)
	if s.ID.IsValue() {
		vals = append(vals, "id")
	}
	if !s.Name.IsUnset() {
		vals = append(vals, "name")
	}
	if !s.MemberCount.IsUnset() {
		vals = append(vals, "member_count")
	}
	if s.UserID.IsValue() {
		vals = append(vals, "user_id")
	}
	return vals
}

func (s TeamSetter) Overwrite(t *Team) {
	if s.ID.IsValue() {
		t.ID = s.ID.MustGet()
	}
	if !s.Name.IsUnset() {
		t.Name = s.Name.MustGetNull()
	}
	if !s.MemberCount.IsUnset() {
		t.MemberCount = s.MemberCount.MustGetNull()
	}
	if s.UserID.IsValue() {
		t.UserID = s.UserID.MustGet()
	}
}

func (s *TeamSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Teams.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 4)
		if s.ID.IsValue() {
			vals[0] = psql.Arg(s.ID.MustGet())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if !s.Name.IsUnset() {
			vals[1] = psql.Arg(s.Name.MustGetNull())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if !s.MemberCount.IsUnset() {
			vals[2] = psql.Arg(s.MemberCount.MustGetNull())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.UserID.IsValue() {
			vals[3] = psql.Arg(s.UserID.MustGet())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s TeamSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s TeamSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 4)

	if s.ID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if !s.Name.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "name")...),
			psql.Arg(s.Name),
		}})
	}

	if !s.MemberCount.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "member_count")...),
			psql.Arg(s.MemberCount),
		}})
	}

	if s.UserID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "user_id")...),
			psql.Arg(s.UserID),
		}})
	}

	return exprs
}

// FindTeam retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindTeam(ctx context.Context, exec bob.Executor, IDPK uuid.UUID, cols ...string) (*Team, error) {
	if len(cols) == 0 {
		return Teams.Query(
			sm.Where(Teams.Columns.ID.EQ(psql.Arg(IDPK))),
		).One(ctx, exec)
	}

	return Teams.Query(
		sm.Where(Teams.Columns.ID.EQ(psql.Arg(IDPK))),
		sm.Columns(Teams.Columns.Only(cols...)),
	).One(ctx, exec)
}

// TeamExists checks the presence of a single record by primary key
func TeamExists(ctx context.Context, exec bob.Executor, IDPK uuid.UUID) (bool, error) {
	return Teams.Query(
		sm.Where(Teams.Columns.ID.EQ(psql.Arg(IDPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Team is retrieved from the database
func (o *Team) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Teams.AfterSelectHooks.RunHooks(ctx, exec, TeamSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Teams.AfterInsertHooks.RunHooks(ctx, exec, TeamSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Teams.AfterUpdateHooks.RunHooks(ctx, exec, TeamSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Teams.AfterDeleteHooks.RunHooks(ctx, exec, TeamSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the Team
func (o *Team) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *Team) pkEQ() dialect.Expression {
	return psql.Quote("teams", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Team
func (o *Team) Update(ctx context.Context, exec bob.Executor, s *TeamSetter) error {
	v, err := Teams.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Team record with an executor
func (o *Team) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Teams.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Team using the executor
func (o *Team) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Teams.Query(
		sm.Where(Teams.Columns.ID.EQ(psql.Arg(o.ID))),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after TeamSlice is retrieved from the database
func (o TeamSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Teams.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Teams.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Teams.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Teams.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o TeamSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("teams", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o TeamSlice) copyMatchingRows(from ...*Team) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o TeamSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Teams.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Team:
				o.copyMatchingRows(retrieved)
			case []*Team:
				o.copyMatchingRows(retrieved...)
			case TeamSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Team or a slice of Team
				// then run the AfterUpdateHooks on the slice
				_, err = Teams.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o TeamSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Teams.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Team:
				o.copyMatchingRows(retrieved)
			case []*Team:
				o.copyMatchingRows(retrieved...)
			case TeamSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Team or a slice of Team
				// then run the AfterDeleteHooks on the slice
				_, err = Teams.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o TeamSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals TeamSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Teams.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o TeamSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Teams.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o TeamSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Teams.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

// User starts a query for related objects on users
func (o *Team) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(Users.Columns.ID.EQ(psql.Arg(o.UserID))),
	)...)
}

func (os TeamSlice) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	pkUserID := make(pgtypes.Array[uuid.UUID], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkUserID = append(pkUserID, o.UserID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkUserID), "uuid[]")),
	))

	return Users.Query(append(mods,
		sm.Where(psql.Group(Users.Columns.ID).OP("IN", PKArgExpr)),
	)...)
}

func attachTeamUser0(ctx context.Context, exec bob.Executor, count int, team0 *Team, user1 *User) (*Team, error) {
	setter := &TeamSetter{
		UserID: omit.From(user1.ID),
	}

	err := team0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachTeamUser0: %w", err)
	}

	return team0, nil
}

func (team0 *Team) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	var err error

	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachTeamUser0(ctx, exec, 1, team0, user1)
	if err != nil {
		return err
	}

	team0.R.User = user1

	user1.R.Teams = append(user1.R.Teams, team0)

	return nil
}

func (team0 *Team) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachTeamUser0(ctx, exec, 1, team0, user1)
	if err != nil {
		return err
	}

	team0.R.User = user1

	user1.R.Teams = append(user1.R.Teams, team0)

	return nil
}
