// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"context"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// User is an object representing the database table.
type User struct {
	ID        uuid.UUID           `db:"id,pk" db:"id"`
	Email     string              `db:"email" db:"email"`
	Name      string              `db:"name" db:"name"`
	Age       null.Val[int32]     `db:"age" db:"age"`
	IsActive  null.Val[bool]      `db:"is_active" db:"is_active"`
	CreatedAt null.Val[time.Time] `db:"created_at" db:"created_at"`
	UpdatedAt null.Val[time.Time] `db:"updated_at" db:"updated_at"`

	R userR `db:"-" db:"-"`
}

// UserSlice is an alias for a slice of pointers to User.
// This should almost always be used instead of []*User.
type UserSlice []*User

// Users contains methods to work with the users table
var Users = psql.NewTablex[*User, UserSlice, *UserSetter]("", "users", buildUserColumns("users"))

// UsersQuery is a query on the users table
type UsersQuery = *psql.ViewQuery[*User, UserSlice]

// userR is where relationships are stored.
type userR struct {
	Teams TeamSlice `db:"Teams"` // teams.fk_customer
}

func buildUserColumns(alias string) userColumns {
	return userColumns{
		ColumnsExpr: expr.NewColumnsExpr(
			"id", "email", "name", "age", "is_active", "created_at", "updated_at",
		).WithParent("users"),
		tableAlias: alias,
		ID:         psql.Quote(alias, "id"),
		Email:      psql.Quote(alias, "email"),
		Name:       psql.Quote(alias, "name"),
		Age:        psql.Quote(alias, "age"),
		IsActive:   psql.Quote(alias, "is_active"),
		CreatedAt:  psql.Quote(alias, "created_at"),
		UpdatedAt:  psql.Quote(alias, "updated_at"),
	}
}

type userColumns struct {
	expr.ColumnsExpr
	tableAlias string
	ID         psql.Expression
	Email      psql.Expression
	Name       psql.Expression
	Age        psql.Expression
	IsActive   psql.Expression
	CreatedAt  psql.Expression
	UpdatedAt  psql.Expression
}

func (c userColumns) Alias() string {
	return c.tableAlias
}

func (userColumns) AliasedAs(alias string) userColumns {
	return buildUserColumns(alias)
}

// UserSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type UserSetter struct {
	ID        omit.Val[uuid.UUID]     `db:"id,pk" db:"id"`
	Email     omit.Val[string]        `db:"email" db:"email"`
	Name      omit.Val[string]        `db:"name" db:"name"`
	Age       omitnull.Val[int32]     `db:"age" db:"age"`
	IsActive  omitnull.Val[bool]      `db:"is_active" db:"is_active"`
	CreatedAt omitnull.Val[time.Time] `db:"created_at" db:"created_at"`
	UpdatedAt omitnull.Val[time.Time] `db:"updated_at" db:"updated_at"`
}

func (s UserSetter) SetColumns() []string {
	vals := make([]string, 0, 7)
	if s.ID.IsValue() {
		vals = append(vals, "id")
	}
	if s.Email.IsValue() {
		vals = append(vals, "email")
	}
	if s.Name.IsValue() {
		vals = append(vals, "name")
	}
	if !s.Age.IsUnset() {
		vals = append(vals, "age")
	}
	if !s.IsActive.IsUnset() {
		vals = append(vals, "is_active")
	}
	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}
	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}
	return vals
}

func (s UserSetter) Overwrite(t *User) {
	if s.ID.IsValue() {
		t.ID = s.ID.MustGet()
	}
	if s.Email.IsValue() {
		t.Email = s.Email.MustGet()
	}
	if s.Name.IsValue() {
		t.Name = s.Name.MustGet()
	}
	if !s.Age.IsUnset() {
		t.Age = s.Age.MustGetNull()
	}
	if !s.IsActive.IsUnset() {
		t.IsActive = s.IsActive.MustGetNull()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt = s.CreatedAt.MustGetNull()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt = s.UpdatedAt.MustGetNull()
	}
}

func (s *UserSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Users.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 7)
		if s.ID.IsValue() {
			vals[0] = psql.Arg(s.ID.MustGet())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.Email.IsValue() {
			vals[1] = psql.Arg(s.Email.MustGet())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.Name.IsValue() {
			vals[2] = psql.Arg(s.Name.MustGet())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if !s.Age.IsUnset() {
			vals[3] = psql.Arg(s.Age.MustGetNull())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if !s.IsActive.IsUnset() {
			vals[4] = psql.Arg(s.IsActive.MustGetNull())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if !s.CreatedAt.IsUnset() {
			vals[5] = psql.Arg(s.CreatedAt.MustGetNull())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if !s.UpdatedAt.IsUnset() {
			vals[6] = psql.Arg(s.UpdatedAt.MustGetNull())
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s UserSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s UserSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 7)

	if s.ID.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if s.Email.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "email")...),
			psql.Arg(s.Email),
		}})
	}

	if s.Name.IsValue() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "name")...),
			psql.Arg(s.Name),
		}})
	}

	if !s.Age.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "age")...),
			psql.Arg(s.Age),
		}})
	}

	if !s.IsActive.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "is_active")...),
			psql.Arg(s.IsActive),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindUser retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindUser(ctx context.Context, exec bob.Executor, IDPK uuid.UUID, cols ...string) (*User, error) {
	if len(cols) == 0 {
		return Users.Query(
			sm.Where(Users.Columns.ID.EQ(psql.Arg(IDPK))),
		).One(ctx, exec)
	}

	return Users.Query(
		sm.Where(Users.Columns.ID.EQ(psql.Arg(IDPK))),
		sm.Columns(Users.Columns.Only(cols...)),
	).One(ctx, exec)
}

// UserExists checks the presence of a single record by primary key
func UserExists(ctx context.Context, exec bob.Executor, IDPK uuid.UUID) (bool, error) {
	return Users.Query(
		sm.Where(Users.Columns.ID.EQ(psql.Arg(IDPK))),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after User is retrieved from the database
func (o *User) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Users.AfterSelectHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Users.AfterInsertHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, UserSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the User
func (o *User) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *User) pkEQ() dialect.Expression {
	return psql.Quote("users", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the User
func (o *User) Update(ctx context.Context, exec bob.Executor, s *UserSetter) error {
	v, err := Users.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single User record with an executor
func (o *User) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Users.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the User using the executor
func (o *User) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Users.Query(
		sm.Where(Users.Columns.ID.EQ(psql.Arg(o.ID))),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after UserSlice is retrieved from the database
func (o UserSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Users.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Users.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o UserSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("users", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o UserSlice) copyMatchingRows(from ...*User) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o UserSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Users.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *User:
				o.copyMatchingRows(retrieved)
			case []*User:
				o.copyMatchingRows(retrieved...)
			case UserSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a User or a slice of User
				// then run the AfterUpdateHooks on the slice
				_, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o UserSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Users.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *User:
				o.copyMatchingRows(retrieved)
			case []*User:
				o.copyMatchingRows(retrieved...)
			case UserSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a User or a slice of User
				// then run the AfterDeleteHooks on the slice
				_, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o UserSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals UserSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Users.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o UserSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Users.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o UserSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Users.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

// Teams starts a query for related objects on teams
func (o *User) Teams(mods ...bob.Mod[*dialect.SelectQuery]) TeamsQuery {
	return Teams.Query(append(mods,
		sm.Where(Teams.Columns.UserID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os UserSlice) Teams(mods ...bob.Mod[*dialect.SelectQuery]) TeamsQuery {
	pkID := make(pgtypes.Array[uuid.UUID], 0, len(os))
	for _, o := range os {
		if o == nil {
			continue
		}
		pkID = append(pkID, o.ID)
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkID), "uuid[]")),
	))

	return Teams.Query(append(mods,
		sm.Where(psql.Group(Teams.Columns.UserID).OP("IN", PKArgExpr)),
	)...)
}

func insertUserTeams0(ctx context.Context, exec bob.Executor, teams1 []*TeamSetter, user0 *User) (TeamSlice, error) {
	for i := range teams1 {
		teams1[i].UserID = omit.From(user0.ID)
	}

	ret, err := Teams.Insert(bob.ToMods(teams1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserTeams0: %w", err)
	}

	return ret, nil
}

func attachUserTeams0(ctx context.Context, exec bob.Executor, count int, teams1 TeamSlice, user0 *User) (TeamSlice, error) {
	setter := &TeamSetter{
		UserID: omit.From(user0.ID),
	}

	err := teams1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserTeams0: %w", err)
	}

	return teams1, nil
}

func (user0 *User) InsertTeams(ctx context.Context, exec bob.Executor, related ...*TeamSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	teams1, err := insertUserTeams0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.Teams = append(user0.R.Teams, teams1...)

	for _, rel := range teams1 {
		rel.R.User = user0
	}
	return nil
}

func (user0 *User) AttachTeams(ctx context.Context, exec bob.Executor, related ...*Team) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	teams1 := TeamSlice(related)

	_, err = attachUserTeams0(ctx, exec, len(related), teams1, user0)
	if err != nil {
		return err
	}

	user0.R.Teams = append(user0.R.Teams, teams1...)

	for _, rel := range related {
		rel.R.User = user0
	}

	return nil
}
