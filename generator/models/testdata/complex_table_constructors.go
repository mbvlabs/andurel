// Code generated by andurel. DO NOT EDIT.
// This file contains constructor functions for SQLC parameters.
// These functions are automatically updated during schema refresh operations.

package db

import (
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

// Constructor functions for SQLC parameters - these get updated during refresh
// to make schema changes compiler-enforced and visible

func NewInsertComprehensiveExampleParams(
	uuidid uuid.UUID,
	smallint int16,
	regularint pgtype.Int4,
	bigint int64,
	decimalprecise pgtype.Numeric,
	numericfield pgtype.Numeric,
	realfloat pgtype.Float4,
	doublefloat float64,
	smallserial int16,
	bigserial pgtype.Int8,
	fixedchar pgtype.Text,
	variablechar string,
	unlimitedtext pgtype.Text,
	textwithdefault pgtype.Text,
	textnotnull string,
	isactive pgtype.Bool,
	isverified bool,
	nullableflag pgtype.Bool,
	createddate pgtype.Date,
	birthdate pgtype.Date,
	exacttime pgtype.Time,
	timewithzone pgtype.Timetz,
	createdtimestamp pgtype.Timestamp,
	updatedtimestamp pgtype.Timestamp,
	timestampwithzone pgtype.Timestamptz,
	durationinterval pgtype.Interval,
	workhours pgtype.Interval,
	filedata pgtype.Bytea,
	requiredbinary []byte,
	ipaddress pgtype.Inet,
	ipnetwork pgtype.CIDR,
	macaddress pgtype.Macaddr,
	mac8address pgtype.Macaddr8,
	pointlocation pgtype.Point,
	linesegment pgtype.Lseg,
	rectangularbox pgtype.Box,
	pathdata pgtype.Path,
	polygonshape pgtype.Polygon,
	circlearea pgtype.Circle,
	jsondata pgtype.JSON,
	jsonbdata pgtype.JSONB,
	jsonbnotnull pgtype.JSONB,
	integerarray pgtype.Array[int32],
	textarray pgtype.Array[string],
	multidimarray pgtype.Array[int32],
	intrange pgtype.Int4range,
	bigintrange pgtype.Int8range,
	numericrange pgtype.Numrange,
) InsertComprehensiveExampleParams {
	return InsertComprehensiveExampleParams{
		ID:                uuid.New(),
		UuidID:            uuidid,
		SmallInt:          smallint,
		RegularInt:        regularint,
		BigInt:            bigint,
		DecimalPrecise:    decimalprecise,
		NumericField:      numericfield,
		RealFloat:         realfloat,
		DoubleFloat:       doublefloat,
		SmallSerial:       smallserial,
		BigSerial:         bigserial,
		FixedChar:         fixedchar,
		VariableChar:      variablechar,
		UnlimitedText:     unlimitedtext,
		TextWithDefault:   textwithdefault,
		TextNotNull:       textnotnull,
		IsActive:          isactive,
		IsVerified:        isverified,
		NullableFlag:      nullableflag,
		CreatedDate:       createddate,
		BirthDate:         birthdate,
		ExactTime:         exacttime,
		TimeWithZone:      timewithzone,
		CreatedTimestamp:  createdtimestamp,
		UpdatedTimestamp:  updatedtimestamp,
		TimestampWithZone: timestampwithzone,
		DurationInterval:  durationinterval,
		WorkHours:         workhours,
		FileData:          filedata,
		RequiredBinary:    requiredbinary,
		IpAddress:         ipaddress,
		IpNetwork:         ipnetwork,
		MacAddress:        macaddress,
		Mac8Address:       mac8address,
		PointLocation:     pointlocation,
		LineSegment:       linesegment,
		RectangularBox:    rectangularbox,
		PathData:          pathdata,
		PolygonShape:      polygonshape,
		CircleArea:        circlearea,
		JsonData:          jsondata,
		JsonbData:         jsonbdata,
		JsonbNotNull:      jsonbnotnull,
		IntegerArray:      integerarray,
		TextArray:         textarray,
		MultidimArray:     multidimarray,
		IntRange:          intrange,
		BigintRange:       bigintrange,
		NumericRange:      numericrange,
	}
}

func NewUpdateComprehensiveExampleParams(
	id uuid.UUID,
	uuidid uuid.UUID,
	smallint int16,
	regularint pgtype.Int4,
	bigint int64,
	decimalprecise pgtype.Numeric,
	numericfield pgtype.Numeric,
	realfloat pgtype.Float4,
	doublefloat float64,
	smallserial int16,
	bigserial pgtype.Int8,
	fixedchar pgtype.Text,
	variablechar string,
	unlimitedtext pgtype.Text,
	textwithdefault pgtype.Text,
	textnotnull string,
	isactive pgtype.Bool,
	isverified bool,
	nullableflag pgtype.Bool,
	createddate pgtype.Date,
	birthdate pgtype.Date,
	exacttime pgtype.Time,
	timewithzone pgtype.Timetz,
	createdtimestamp pgtype.Timestamp,
	updatedtimestamp pgtype.Timestamp,
	timestampwithzone pgtype.Timestamptz,
	durationinterval pgtype.Interval,
	workhours pgtype.Interval,
	filedata pgtype.Bytea,
	requiredbinary []byte,
	ipaddress pgtype.Inet,
	ipnetwork pgtype.CIDR,
	macaddress pgtype.Macaddr,
	mac8address pgtype.Macaddr8,
	pointlocation pgtype.Point,
	linesegment pgtype.Lseg,
	rectangularbox pgtype.Box,
	pathdata pgtype.Path,
	polygonshape pgtype.Polygon,
	circlearea pgtype.Circle,
	jsondata pgtype.JSON,
	jsonbdata pgtype.JSONB,
	jsonbnotnull pgtype.JSONB,
	integerarray pgtype.Array[int32],
	textarray pgtype.Array[string],
	multidimarray pgtype.Array[int32],
	intrange pgtype.Int4range,
	bigintrange pgtype.Int8range,
	numericrange pgtype.Numrange,
) UpdateComprehensiveExampleParams {
	return UpdateComprehensiveExampleParams{
		ID:                id,
		UuidID:            uuidid,
		SmallInt:          smallint,
		RegularInt:        regularint,
		BigInt:            bigint,
		DecimalPrecise:    decimalprecise,
		NumericField:      numericfield,
		RealFloat:         realfloat,
		DoubleFloat:       doublefloat,
		SmallSerial:       smallserial,
		BigSerial:         bigserial,
		FixedChar:         fixedchar,
		VariableChar:      variablechar,
		UnlimitedText:     unlimitedtext,
		TextWithDefault:   textwithdefault,
		TextNotNull:       textnotnull,
		IsActive:          isactive,
		IsVerified:        isverified,
		NullableFlag:      nullableflag,
		CreatedDate:       createddate,
		BirthDate:         birthdate,
		ExactTime:         exacttime,
		TimeWithZone:      timewithzone,
		CreatedTimestamp:  createdtimestamp,
		UpdatedTimestamp:  updatedtimestamp,
		TimestampWithZone: timestampwithzone,
		DurationInterval:  durationinterval,
		WorkHours:         workhours,
		FileData:          filedata,
		RequiredBinary:    requiredbinary,
		IpAddress:         ipaddress,
		IpNetwork:         ipnetwork,
		MacAddress:        macaddress,
		Mac8Address:       mac8address,
		PointLocation:     pointlocation,
		LineSegment:       linesegment,
		RectangularBox:    rectangularbox,
		PathData:          pathdata,
		PolygonShape:      polygonshape,
		CircleArea:        circlearea,
		JsonData:          jsondata,
		JsonbData:         jsonbdata,
		JsonbNotNull:      jsonbnotnull,
		IntegerArray:      integerarray,
		TextArray:         textarray,
		MultidimArray:     multidimarray,
		IntRange:          intrange,
		BigintRange:       bigintrange,
		NumericRange:      numericrange,
	}
}

func NewQueryPaginatedComprehensiveExamplesParams(limit, offset int64) QueryPaginatedComprehensiveExamplesParams {
	return QueryPaginatedComprehensiveExamplesParams{
		Limit:  limit,
		Offset: offset,
	}
}
