package middleware

import (
	"net/http"
	"time"

	"{{.ModuleName}}/database"
	"{{.ModuleName}}/models"
	"github.com/google/uuid"
	"github.com/gorilla/sessions"
	"github.com/labstack/echo/v4"
	"github.com/maypok86/otter"
	"github.com/mbvlabs/datastar"
)

func RequireAuth(store *sessions.CookieStore) echo.MiddlewareFunc {
	return func(next echo.HandlerFunc) echo.HandlerFunc {
		return func(c echo.Context) error {
			sess, err := store.Get(c.Request(), "session")
			if err != nil {
				return c.Redirect(http.StatusSeeOther, "/login")
			}

			userIDStr, ok := sess.Values["user_id"].(string)
			if !ok {
				return c.Redirect(http.StatusSeeOther, "/login")
			}

			userID, err := uuid.Parse(userIDStr)
			if err != nil {
				return c.Redirect(http.StatusSeeOther, "/login")
			}

			authenticated, ok := sess.Values["authenticated"].(bool)
			if !ok || !authenticated {
				return c.Redirect(http.StatusSeeOther, "/login")
			}

			c.Set("user_id", userID)

			return next(c)
		}
	}
}

{{if eq .Database "postgresql"}}
func RequireVerifiedEmail(db database.Postgres) echo.MiddlewareFunc {
	return func(next echo.HandlerFunc) echo.HandlerFunc {
		return func(c echo.Context) error {
			userID := c.Get("user_id").(uuid.UUID)

			user, err := models.GetUserByID(c.Request().Context(), db, userID)
			if err != nil {
				return c.Redirect(http.StatusSeeOther, "/resend-verification")
			}

			if !user.EmailVerified {
				return c.Redirect(http.StatusSeeOther, "/resend-verification")
			}

			return next(c)
		}
	}
}
{{else}}
func RequireVerifiedEmail(db database.SQLite) echo.MiddlewareFunc {
	return func(next echo.HandlerFunc) echo.HandlerFunc {
		return func(c echo.Context) error {
			userID := c.Get("user_id").(uuid.UUID)

			user, err := models.GetUserByID(c.Request().Context(), db, userID)
			if err != nil {
				return c.Redirect(http.StatusSeeOther, "/resend-verification")
			}

			if !user.EmailVerified {
				return c.Redirect(http.StatusSeeOther, "/resend-verification")
			}

			return next(c)
		}
	}
}
{{end}}

func LoginRateLimiter() echo.MiddlewareFunc {
	rateLimitCacheBuilder, _ := otter.NewBuilder[string, int32](10_000)
	rateLimit, _ := rateLimitCacheBuilder.WithTTL(10 * time.Minute).Build()

	return func(next echo.HandlerFunc) echo.HandlerFunc {
		return func(c echo.Context) error {
			ip := c.RealIP()

			hits, found := rateLimit.Get(ip)
			if !found {
				if ok := rateLimit.Set(ip, 1); !ok {
					return next(c)
				}
				return next(c)
			}

			if hits <= 5 {
				if ok := rateLimit.Set(ip, hits+1); !ok {
					return next(c)
				}
				return next(c)
			}

			if hits > 5 {
				sse := datastar.NewSSE(c.Response(), c.Request())
				sse.PatchElements(
					"<p class='text-error-content'>Too many login attempts from your IP address. Please try again later.</p>",
					datastar.WithSelectorID("loginRes"),
					datastar.WithModeInner(),
				)
				return nil
			}

			return next(c)
		}
	}
}