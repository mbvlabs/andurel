package components

import (
	"context"
	"{{.ModuleName}}/config"
	"{{.ModuleName}}/router/routes"
)

type HeadDataOption func(*HeadData)

type MetaContent struct {
	Content  string
	Name     string
	Property string
}

type HeadData struct {
	siteName 	   		  string
	Title          		  string
	Description    		  string
	TwitterTitle          string
	TwitterDescription    string
	Image                 string
	ImageAlt 	          string
	Slug                  string
	canonical             string
	MetaType              string
	stylesheetHref        string
	scriptSrc             string
	ExtraMeta             []MetaContent
}

templ head(data HeadData) {
	<head>
		<meta charset="UTF-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		<meta name="twitter:card" content="summary_large_image"/>
		<meta name="twitter:creator" content="@mbvlabs"/>
		<title>
			{ data.Title }
		</title>
		<link href={ data.stylesheetHref } rel="stylesheet"/>
		<meta property="og:type" content={ data.MetaType }/>
		<meta property="og:title" content={ data.Title }/>
		<meta property="og:description" content={ data.Description }/>
		<meta property="og:url" content={ data.canonical + data.Slug }/>
		<meta property="og:site_name" content={ data.siteName }/>
		<meta property="og:locale" content="en_US" />
		if data.TwitterTitle != "" && data.TwitterDescription != "" {
		    <meta name="twitter:title" content={ data.TwitterTitle }/>
		    <meta name="twitter:description" content={ data.TwitterDescription }/>

			if data.Image != "" {
			    <meta name="twitter:image" content={ data.Image }/>
			}
		}
		if data.Image != "" {
			<meta property="og:image" content={ data.Image }/>
    		<meta property="og:image:alt" content={ data.ImageAlt }/>
		}
		for _, extraMeta := range data.ExtraMeta {
			<meta
				if extraMeta.Name != "" {
					name={ extraMeta.Name }
				}
				if extraMeta.Property != "" {
					property={ extraMeta.Property }
				}
				if extraMeta.Content != "" {
					content={ extraMeta.Content }
				}
			/>
		}
		<meta name="description" content={ data.Description }/>
		<link
			rel="canonical"
			href={ data.canonical + data.Slug }
		/>
		<script src={ data.scriptSrc } type="module"></script>
	</head>
}

func SetupHead(ctx context.Context, opts ...HeadDataOption) templ.Component {

	data := &HeadData{
		siteName:       config.ProjectName,
		Title: 		    config.ProjectName,
		Description:    "Andurel is the web development framework for Go.",
		Slug:           "/",
		canonical:      config.Domain,
		MetaType:       "website",
		stylesheetHref: routes.Stylesheet.Path,
		scriptSrc:      routes.Scripts.Path,
	}

	for _, opt := range opts {
		opt(data)
	}

	return head(*data)
}
