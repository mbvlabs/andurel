// Package controllers provides HTTP handlers for the web application.
package controllers

import (
	"context"

{{- if .HasSlot "controllers:newArgs"}}
	"{{.ModuleName}}/config"
{{- end}}
	"{{.ModuleName}}/database"
	"{{.ModuleName}}/router/cookies"

	"github.com/a-h/templ"
	"github.com/labstack/echo/v4"
	"github.com/maypok86/otter"
{{/* slot controllers:imports */}}{{- range .Slot "controllers:imports"}}
{{printf "\t%s\n" .}}{{- end}})

type Controllers struct {
	Assets Assets
	API    API
	Pages  Pages
{{/* slot controllers:structFields */}}{{- range .Slot "controllers:structFields"}}
{{printf "\t%s\n" .}}{{- end}}}

{{- if eq .Database "postgresql"}}
func New({{/* slot controllers:newArgs */}}{{- range $i, $arg := .Slot "controllers:newArgs"}}{{if $i}}, {{end}}{{$arg}}{{- end}}{{if .HasSlot "controllers:newArgs"}}, {{end}}db database.Postgres) (Controllers, error) {
{{- else if eq .Database "sqlite"}}
func New({{/* slot controllers:newArgs */}}{{- range $i, $arg := .Slot "controllers:newArgs"}}{{if $i}}, {{end}}{{$arg}}{{- end}}{{if .HasSlot "controllers:newArgs"}}, {{end}}db database.SQLite) (Controllers, error) {
{{- end}}
	cacheBuilder, err := otter.NewBuilder[string, templ.Component](20)
	if err != nil {
		return Controllers{}, err
	}

	pageCacher, err := cacheBuilder.WithVariableTTL().Build()
	if err != nil {
		return Controllers{}, err
	}

	assets := newAssets()
	pages := newPages(db, pageCacher)
	api := newAPI(db)
{{/* slot controllers:newSetup */}}{{- range .Slot "controllers:newSetup"}}
{{printf "\t%s\n" .}}{{- end}}

	return Controllers{assets, api, pages{{/* slot controllers:newReturn */}}{{- range .Slot "controllers:newReturn"}}, {{.}}{{- end}}}, nil
}

func Render(ctx echo.Context, statusCode int, t templ.Component) error {
	buf := templ.GetBuffer()
	defer templ.ReleaseBuffer(buf)

	appCtx := ctx.Get(string(cookies.AppKey))
	withAppCtx := context.WithValue(
		ctx.Request().Context(),
		cookies.AppKey,
		appCtx,
	)

	flashCtx := ctx.Get(string(cookies.FlashKey))
	withFlashCtx := context.WithValue(
		withAppCtx,
		cookies.FlashKey,
		flashCtx,
	)

	if err := t.Render(withFlashCtx, buf); err != nil {
		return err
	}

	return ctx.HTML(statusCode, buf.String())
}
