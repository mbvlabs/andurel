// Code generated by andurel. DO NOT EDIT.
// This file contains constructor functions for SQLC parameters.
// These functions are automatically updated during schema refresh operations.

package db

{{ if eq .Database "postgresql" }}
import (
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)
{{ else if eq .Database "sqlite" }}
import (
	"time"

	"github.com/google/uuid"
)
{{ end }}

// Constructor functions for SQLC parameters - these get updated during refresh
// to make schema changes compiler-enforced and visible

func NewInsertTokenParams(
	scope string,
	expiresAt time.Time,
	hash string,
	metaData []byte,
) InsertTokenParams {
{{- if eq .Database "postgresql" }}
	return InsertTokenParams{
		ID:    uuid.New(),
		Scope: scope,
		ExpiresAt: pgtype.Timestamptz{
			Time:  expiresAt,
			Valid: !expiresAt.IsZero(),
		},
		Hash:     hash,
		MetaData: metaData,
	}
{{- else if eq .Database "sqlite" }}
	return InsertTokenParams{
		ID:        uuid.New().String(),
		Scope:     scope,
		ExpiresAt: expiresAt,
		Hash:      hash,
		MetaData:  metaData,
	}
{{- end }}
}

func NewUpdateTokenParams(
{{- if eq .Database "postgresql" }}
	id uuid.UUID,
{{- else if eq .Database "sqlite" }}
	id string,
{{- end }}
	scope string,
	expiresAt time.Time,
	hash string,
	metaData []byte,
) UpdateTokenParams {
{{- if eq .Database "postgresql" }}
	return UpdateTokenParams{
		ID:    id,
		Scope: scope,
		ExpiresAt: pgtype.Timestamptz{
			Time:  expiresAt,
			Valid: !expiresAt.IsZero(),
		},
		Hash:     hash,
		MetaData: metaData,
	}
{{- else if eq .Database "sqlite" }}
	return UpdateTokenParams{
		ID:        id,
		Scope:     scope,
		ExpiresAt: expiresAt,
		Hash:      hash,
		MetaData:  metaData,
	}
{{- end }}
}

func NewQueryPaginatedTokensParams(limit, offset int64) QueryPaginatedTokensParams {
	return QueryPaginatedTokensParams{
		Limit:  limit,
		Offset: offset,
	}
}
