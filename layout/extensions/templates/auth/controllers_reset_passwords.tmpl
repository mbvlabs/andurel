package controllers

import (
	"log/slog"
	"net/http"

	"{{.ModuleName}}/config"
	"{{.ModuleName}}/database"
	"{{.ModuleName}}/email"
	"{{.ModuleName}}/router/cookies"
	"{{.ModuleName}}/router/routes"
	"{{.ModuleName}}/services"
	"{{.ModuleName}}/views"

	"github.com/labstack/echo/v4"
)

{{- if eq .Database "postgresql" }}
type ResetPassword struct {
	db          database.Postgres
	emailClient email.Client
	cfg         config.Config
}

func newResetPassword(
	db database.Postgres,
	emailClient email.Client,
	cfg config.Config,
) ResetPassword {
	return ResetPassword{db, emailClient, cfg}
}
{{- else if eq .Database "sqlite" }}
type ResetPassword struct {
	db          database.SQLite
	emailClient email.Client
	cfg         config.Config
}

func newResetPassword(
	db database.SQLite,
	emailClient email.Client,
	cfg config.Config,
) ResetPassword {
	return ResetPassword{db, emailClient, cfg}
}
{{- end }}

func (p ResetPassword) New(c echo.Context) error {
	return render(c, views.ResetPasswordRequestForm())
}

func (p ResetPassword) Create(c echo.Context) error {
	var payload struct {
		Email string `form:"email"`
	}

	if err := c.Bind(&payload); err != nil {
		slog.ErrorContext(
			c.Request().Context(),
			"could not parse password reset request payload",
			"error",
			err,
		)
		return render(c, views.BadRequest())
	}

	err := services.RequestResetPassword(
		c.Request().Context(),
		p.db,
		p.cfg.Auth.PasswordSalt,
		p.emailClient,
		services.RequestResetPasswordData{
			Email: payload.Email,
		},
	)
	if err != nil {
		slog.ErrorContext(
			c.Request().Context(),
			"failed to request password reset",
			"error",
			err,
		)
		if flashErr := cookies.AddFlash(c, cookies.FlashError, "Failed to send password reset code"); flashErr != nil {
			return render(c, views.InternalError())
		}

		return c.Redirect(http.StatusSeeOther, routes.PasswordNew.Path)
	}

	if flashErr := cookies.AddFlash(c, cookies.FlashSuccess, "If an account exists with that email, you will receive password reset instructions."); flashErr != nil {
		return render(c, views.InternalError())
	}

	return c.Redirect(http.StatusSeeOther, routes.SessionNew.Path)
}

func (p ResetPassword) Edit(c echo.Context) error {
	c.Response().Header().Set("Referrer-Policy", "strict-origin")

	token := c.Param("token")
	if token == "" {
		if flashErr := cookies.AddFlash(c, cookies.FlashError, "Invalid or missing reset token"); flashErr != nil {
			return render(c, views.InternalError())
		}
		return c.Redirect(http.StatusSeeOther, routes.PasswordNew.Path)
	}

	return render(c, views.ResetPasswordForm(token))
}

func (p ResetPassword) Update(c echo.Context) error {
	var payload struct {
		Token           string `json:"resetPasswordToken"`
		Password        string `json:"password"`
		ConfirmPassword string `json:"confirmPassword"`
	}

	if err := c.Bind(&payload); err != nil {
		slog.ErrorContext(
			c.Request().Context(),
			"could not parse password reset payload",
			"error",
			err,
		)
		return render(c, views.BadRequest())
	}

	if err := services.ResetPassword(
		c.Request().Context(),
		p.db,
		p.cfg.Auth.PasswordSalt,
		services.ResetPasswordData{
			Token:           payload.Token,
			Password:        payload.Password,
			ConfirmPassword: payload.ConfirmPassword,
		},
	); err != nil {
		slog.ErrorContext(
			c.Request().Context(),
			"failed to reset password",
			"error",
			err,
		)

		var errorMsg string
		switch err {
		case services.ErrInvalidResetCode:
			errorMsg = "Invalid reset code"
		case services.ErrExpiredResetCode:
			errorMsg = "Reset code has expired"
		default:
			errorMsg = "Failed to reset password"
		}

		if flashErr := cookies.AddFlash(c, cookies.FlashError, errorMsg); flashErr != nil {
			return render(c, views.InternalError())
		}
		redirectPath := routes.PasswordEdit.Path
		if payload.Token != "" {
			redirectPath = routes.PasswordEdit.GetPath(payload.Token)
		}

		return c.Redirect(http.StatusSeeOther, redirectPath)
	}

	if flashErr := cookies.AddFlash(c, cookies.FlashSuccess, "Password reset successfully! Please log in."); flashErr != nil {
		return render(c, views.InternalError())
	}

	return c.Redirect(http.StatusSeeOther, routes.SessionNew.Path)
}
