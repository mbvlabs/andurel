package cookies

import (
	"log/slog"

	"{{.ModuleName}}/config"
	"{{.ModuleName}}/models"

	"github.com/gorilla/sessions"
	"github.com/labstack/echo-contrib/session"
	"github.com/labstack/echo/v4"
)

const (
	oneWeekInSeconds    = 604800
	SessIsAuthenticated = "is_authenticated"
	SessUserID          = "user_id"
	SessUserEmail       = "user_email"
	SessIsAdmin         = "is_admin"
)

func CreateAuthSession(
	c echo.Context,
	extend bool,
	user models.User,
) error {
	sess, err := session.Get(config.AuthenticatedSessionName, c)
	if err != nil {
		return err
	}

	maxAge := oneWeekInSeconds
	if extend {
		maxAge = oneWeekInSeconds * 2
	}

	sess.Options = &sessions.Options{
		Path:     "/",
		MaxAge:   maxAge,
		HttpOnly: true,
	}
	sess.Values[SessIsAuthenticated] = true
	sess.Values[SessUserID] = user.ID
	sess.Values[SessUserEmail] = user.Email
	sess.Values[SessIsAdmin] = user.IsAdmin

	if err := sess.Save(c.Request(), c.Response()); err != nil {
		slog.Error("error saving session", "error", err)
		return err
	}

	return nil
}


func DestroyAuthSession(c echo.Context) error {
	sess, err := session.Get(config.AuthenticatedSessionName, c)
	if err != nil {
		return err
	}

	sess.Options = &sessions.Options{
		Path:     "/",
		MaxAge:   -1,
		HttpOnly: true,
	}

	sess.Values[SessIsAuthenticated] = false
	sess.Values[SessUserID] = ""
	sess.Values[SessUserEmail] = ""
	sess.Values[SessIsAdmin] = false

	if err := sess.Save(c.Request(), c.Response()); err != nil {
		return err
	}

	return nil
}
